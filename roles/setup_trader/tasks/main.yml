# code: language=ansible
- name: Check docker hub remaining pull limit
  block:
    - name: Get temp docker token
      ansible.builtin.uri:
        url: https://auth.docker.io/token?service=registry.docker.io&scope=repository:ratelimitpreview/test:pull
        user: "{{ docker_user }}"
        password: "{{ docker_password }}"
        method: GET
        return_content: true
      register: http_response

    - name: Parse token
      ansible.builtin.set_fact:
        temp_docker_token: "{{ http_response.content | from_json | json_query('token') }}"

    - name: Get remaining
      ansible.builtin.uri:
        url: https://registry-1.docker.io/v2/ratelimitpreview/test/manifests/latest
        headers:
          Authorization: "Bearer {{ temp_docker_token }}"
        method: GET
        return_content: true
      register: http_response_remaining

    - name: Parse remaining
      ansible.builtin.set_fact:
        docker_remaining: "{{ http_response_remaining.ratelimit_remaining | split(';') }}"

    - name: Use docker hub
      ansible.builtin.set_fact:
        image_owner: "{{ docker_user }}"
        use_registry: "docker"
      when: docker_remaining[0] | int > 10

    - name: Use github container registry
      ansible.builtin.set_fact:
        image_owner: ghcr.io/toc-taiwan
        use_registry: "github"
      when: docker_remaining[0] | int < 10

    - name: Decide registry
      ansible.builtin.debug:
        msg: "Use {{ use_registry }}, remaining {{ docker_remaining[0] }}"

- name: Login Github Container Registry
  community.docker.docker_login:
    registry_url: ghcr.io
    username: "{{ github_user }}"
    password: "{{ github_token }}"
    reauthorize: true
  when: use_registry == "github"

- name: Login Docker Hub Container Registry
  community.docker.docker_login:
    username: "{{ docker_user }}"
    password: "{{ docker_token }}"
    reauthorize: true
  when: use_registry == "docker"

- name: Loki
  block:
    - name: Diable loki
      community.docker.docker_plugin:
        plugin_name: loki
        state: disable
      register: loki_disabled
      ignore_errors: true
    - name: Remove loki
      community.docker.docker_plugin:
        plugin_name: grafana/loki-docker-driver:latest
        alias: loki
        state: absent
        force_remove: true
    - name: Install loki
      community.docker.docker_plugin:
        plugin_name: grafana/loki-docker-driver:latest
        alias: loki
        state: present
    - name: Enable loki
      community.docker.docker_plugin:
        plugin_name: loki
        state: enable
    - name: Configure Docker
      ansible.builtin.template:
        src: loki.j2
        dest: /etc/docker/daemon.json
        mode: "644"
    - name: Reload docker
      ansible.builtin.systemd:
        name: docker
        state: restarted

- name: Create bridge network
  community.docker.docker_network:
    name: "{{ network_name }}"
    force: true
    enable_ipv6: true
    ipam_config:
      - subnet: "172.99.10.0/24"
      - subnet: "fdd0:31ae:44cd:adb2::/64"

- name: Node exporter
  block:
    - name: Start node exporter
      community.docker.docker_container:
        # https://hub.docker.com/r/bitnami/node-exporter/tags
        name: node-exporter
        image: bitnami/node-exporter:1.7.0
        restart_policy: always
        detach: true
        published_ports:
          - "9100:9100"
        pid_mode: host
        volumes:
          - /:/host:ro,rslave
        command: --path.rootfs=/host
        networks:
          - name: "{{ network_name }}"
    - name: Check if is listening
      ansible.builtin.wait_for:
        port: 9100
        delay: 5
        timeout: 120

# - name: Rabbitmq
#   block:
#     - name: Start Rabbitmq
#       community.docker.docker_container:
#         # https://hub.docker.com/_/rabbitmq/tags
#         name: toc-rabbitmq
#         image: rabbitmq:3.12.12-management
#         restart_policy: always
#         detach: true
#         published_ports:
#           - "5672:5672"
#           - "15672:15672"
#           - "15692:15692"
#         env:
#           RABBITMQ_DEFAULT_USER: "{{ rabbitmq_user }}"
#           RABBITMQ_DEFAULT_PASS: "{{ rabbitmq_password }}"
#         networks:
#           - name: "{{ network_name }}"
#     - name: Check if is listening
#       ansible.builtin.wait_for:
#         port: 15672
#         delay: 5
#         timeout: 120

- name: ToC Sinopac Python
  block:
    - name: Create env folder
      ansible.builtin.file:
        path: /root/ansible-data/toc-sinopac-python-env
        state: directory
        mode: "755"
    - name: Configure ToC Sinopac Python
      ansible.builtin.template:
        src: toc_sinopac_python.env.j2
        dest: /root/ansible-data/toc-sinopac-python-env/.env
        mode: "644"
    - name: Start ToC Sinopac Python
      community.docker.docker_container:
        name: toc-sinopac-python
        image: "{{ image_owner }}/toc-sinopac-python:latest"
        restart_policy: always
        detach: true
        published_ports:
          - "26670:26670"
          - "6666:6666"
          - "56666:56666"
        volumes:
          - /root/ansible-data/toc-sinopac-python-logs:/toc-sinopac-python/logs
          - /root/ansible-data/toc-sinopac-python-env/.env:/toc-sinopac-python/.env
        env:
          TZ: "Asia/Taipei"
        networks:
          - name: "{{ network_name }}"
    - name: Check if is listening
      ansible.builtin.wait_for:
        port: 56666
        delay: 5
        timeout: 120

- name: ToC Machine Trading
  block:
    - name: Create env folder
      ansible.builtin.file:
        path: /root/ansible-data/toc-machine-trading-env
        state: directory
        mode: "755"
    - name: Create config folder
      ansible.builtin.file:
        path: /root/ansible-data/toc-machine-trading-configs
        state: directory
        mode: "755"
    - name: Configure ToC Machine Trading Env
      ansible.builtin.template:
        src: toc_machine_trading.env.j2
        dest: /root/ansible-data/toc-machine-trading-env/.env
        mode: "644"
    - name: Configure ToC Machine Trading Config
      ansible.builtin.template:
        src: toc_machine_trading.yml.j2
        dest: /root/ansible-data/toc-machine-trading-configs/config.yml
        mode: "644"
    - name: Configure ToC Machine Trading Service Account
      ansible.builtin.template:
        src: service_account.json.j2
        dest: /root/ansible-data/toc-machine-trading-configs/service_account.json
        mode: "644"


    - name: Start ToC Machine Trading
      community.docker.docker_container:
        name: toc-machine-trading
        image: "{{ image_owner }}/toc-machine-trading:latest"
        restart_policy: always
        detach: true
        volumes:
          - /root/ansible-data/toc-machine-trading-logs:/toc-machine-trading/logs
          - /root/ansible-data/toc-machine-trading-env/.env:/toc-machine-trading/.env
          - /root/ansible-data/toc-machine-trading-configs/config.yml:/toc-machine-trading/configs/config.yml
          - /root/ansible-data/toc-machine-trading-configs/service_account.json:/toc-machine-trading/configs/service_account.json
        env:
          TZ: "Asia/Taipei"
        network_mode: container:toc-sinopac-python
    - name: Check if is listening
      ansible.builtin.wait_for:
        port: 26670
        delay: 5
        timeout: 120

- name: Nginx
  block:
    - name: Remove current config folder
      ansible.builtin.file:
        path: /root/ansible-data/nginx
        state: absent
    - name: Create config folder
      ansible.builtin.file:
        path: /root/ansible-data/nginx
        state: directory
        mode: "755"
    - name: Create AASA folder
      ansible.builtin.file:
        path: /root/ansible-data/nginx/aasa
        state: directory
        mode: "755"
    - name: Create Android Universal Link folder
      ansible.builtin.file:
        path: /root/ansible-data/nginx/android
        state: directory
        mode: "755"

    - name: Configure Nginx
      ansible.builtin.template:
        src: nginx.conf.j2
        dest: /root/ansible-data/nginx/nginx.conf
        mode: "644"
    - name: Add AASA
      ansible.builtin.template:
        src: assetlinks.json.j2
        dest: /root/ansible-data/nginx/aasa/assetlinks.json
        mode: "644"
    - name: Add Android Universal Link
      ansible.builtin.template:
        src: assetlinks.json.android.j2
        dest: /root/ansible-data/nginx/android/assetlinks.json
        mode: "644"

    - name: Start Nginx
      community.docker.docker_container:
        # https://hub.docker.com/_/nginx/tags
        name: nginx
        image: nginx:stable
        published_ports:
          - "80:80"
          - "443:443"
        restart_policy: always
        detach: true
        volumes:
          - /root/ansible-data/nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf:ro
          - /root/ansible-data/nginx/aasa:/var/www/aasa/:ro
          - /root/ansible-data/nginx/android:/var/www/android/:ro
          - /root/ansible-data/certbot/www:/var/www/certbot/:ro
          - /root/ansible-data/certbot/conf:/etc/nginx/ssl/:ro
        networks:
          - name: "{{ network_name }}"
    - name: Check if is listening
      ansible.builtin.wait_for:
        port: 443
        delay: 5
        timeout: 120
